import React from "react";
import { ethers } from 'ethers';
import lighthouse from '@lighthouse-web3/sdk';

function App() {

  const [cid, setCid] = React.useState(null)
  const [status, setStatus] = React.useState(null)

  const encryptionSignature = async() =>{
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    const signer = provider.getSigner();
    const address = await signer.getAddress();
    const messageRequested = (await lighthouse.getAuthMessage(address)).data.message;
    const signedMessage = await signer.signMessage(messageRequested);
    return({
      signedMessage: signedMessage,
      publicKey: address
    });
  }

  const progressCallback = (progressData) => {
    let percentageDone =
      100 - (progressData?.total / progressData?.uploaded)?.toFixed(2);
    console.log(percentageDone);
  };

  /* Deploy file along with encryption */
  const uploadFileEncrypted = async(e) =>{
    /*
       uploadEncrypted(e, accessToken, publicKey, signedMessage, uploadProgressCallback)
       - e: js event
       - accessToken: your API key
       - publicKey: wallets public key
       - signedMessage: message signed by the owner of publicKey
       - uploadProgressCallback: function to get progress (optional)
    */
    const sig = await encryptionSignature();
    const response = await lighthouse.uploadEncrypted(
      e,
      "", // add api key here
      sig.publicKey,
      sig.signedMessage,
      progressCallback
    );
    console.log(response);
    setCid(response.data.Hash);
    /*
      output:
        data: {
          Name: "c04b017b6b9d1c189e15e6559aeb3ca8.png",
          Size: "318557",
          Hash: "QmcuuAtmYqbPYmPx3vhJvPDi61zMxYvJbfENMjBQjq7aM3"
        }
      Note: Hash in response is CID.
    */
  }

  const applyAccessConditions = async(e) =>{
    // CID on which you are applying encryption
    // CID is generated by uploading a file with encryption
    // Only the owner of the file can apply access conditions
    // const cid = "";

    // Conditions to add
    const conditions = [
      {
        id: 1,
        chain: "hyperspace",
        method: "balanceOf",
        standardContractType: "ERC721",
        contractAddress: "0xe065a275d932cc9c4cd00824914b9fbcace2e5cf",
        returnValueTest: { comparator: ">=", value: "1" },
        parameters: [":userAddress"],
      },
    ];

    // Aggregator is what kind of operation to apply to access conditions
    // Suppose there are two conditions then you can apply ([1] and [2]), ([1] or [2]), !([1] and [2]).
    const aggregator = "([1])";
    const {publicKey, signedMessage} = await encryptionSignature();

    /*
      accessCondition(publicKey, cid, signedMessage, conditions, aggregator)
        Parameters:
          publicKey: owners public key
          CID: CID of the file to decrypt
          signedMessage: message signed by the owner of publicKey
          conditions: should be in a format like above
          aggregator: aggregator to apply conditions
    */
    const response = await lighthouse.applyAccessCondition(
      publicKey,
      cid,
      signedMessage,
      conditions,
      aggregator
    );

    console.log(response);
    setCid(response.data.status);
    /*
      {
        data: {
          cid: "QmZkEMF5y5Pq3n291fG45oyrmX8bwRh319MYvj7V4W4tNh",
          status: "Success"
        }
      }
    */
  }

  return (
    <div className="App">
      <div style={{margin: 30 + 'px'}}>
        <input onChange={e=>uploadFileEncrypted(e)} type="file" />
        <h3>Uploaded File Details</h3>
        <p>CID:{cid}</p>
        <div style={{marginTop: 100 + 'px'}}>
          <button onClick={()=>{applyAccessConditions()}}>Apply Access Conditions</button>
          <p>Status:{status}</p>  
          {
            status?
            <p>Visit at: https://files.lighthouse.storage/viewFile/{cid}</p>
            :
            null
          }
          
        </div>
      </div>
    </div>
  );
}

export default App;
